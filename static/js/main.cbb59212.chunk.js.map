{"version":3,"sources":["components/header.js","components/pesquisaCep.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Component","PesquisaCep","props","state","cep","endereco","uf","getCEP","bind","handleChange","getLocal","transformaLocal","axios","get","this","then","res","console","log","data","setState","logradouro","bairro","localidade","navigator","geolocation","getCurrentPosition","alert","local","coords","latitude","longitude","results","formatted_address","e","target","value","type","onChange","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"gTAGqBA,G,uLAEb,OACI,4BAAQC,UAAU,cACd,yBAAKA,UAAU,iBACX,6D,GALgBC,c,uCCCfC,E,YAEjB,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KAEDC,MAAQ,CAACC,IAAK,GAAIC,SAAU,GAAIC,GAAI,IAEzC,EAAKC,OAAS,EAAKA,OAAOC,KAAZ,gBACd,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAKE,SAAW,EAAKA,SAASF,KAAd,gBAChB,EAAKG,gBAAkB,EAAKA,gBAAgBH,KAArB,gBART,E,sEAWR,IAAD,OACLI,IAAMC,IAAN,mCAAsCC,KAAKX,MAAMC,IAAjD,UACKW,MAAK,SAAAC,GACFC,QAAQC,IAAIF,EAAIG,MAChB,EAAKC,UAAS,SAAAjB,GACV,MAAO,CACHE,SAAS,GAAD,OAAKW,EAAIG,KAAKE,WAAd,qBAAqCL,EAAIG,KAAKG,OAA9C,aAAyDN,EAAIG,KAAKI,WAAlE,cAAkFP,EAAIG,KAAKb,GAA3F,aAAkGU,EAAIG,KAAKf,IAA3G,qB,iCAOrBoB,UAAUC,YACTD,UAAUC,YAAYC,mBAAmBZ,KAAKH,iBAG9CgB,MAAM,kE,sCAIEC,GAAO,IAAD,OAClBhB,IAAMC,IAAN,mEAAsEe,EAAMC,OAAOC,SAAnF,YAA+FF,EAAMC,OAAOE,UAA5G,iDACKhB,MAAK,SAAAC,GACF,EAAKI,UAAS,SAAAjB,GACV,MAAM,CAACE,SAAUW,EAAIG,KAAKa,QAAQ,GAAGC,2B,mCAMxCC,GACTpB,KAAKM,SAAL,eAAmBN,KAAKX,MAAxB,CAA+BC,IAAK8B,EAAEC,OAAOC,W,+BAG7C,OACI,yBAAKrC,UAAU,aACX,yBAAKA,UAAU,YACX,yBAAKA,UAAU,gBACX,2BAAOA,UAAU,kBAAjB,kBACA,2BAAOsC,KAAK,OAAOtC,UAAU,MAAMuC,SAAUxB,KAAKL,aAAc2B,MAAOtB,KAAKX,MAAMC,MAClF,4BAAQL,UAAU,YAAYwC,QAASzB,KAAKP,QAA5C,cAEJ,yBAAKR,UAAU,mBACX,mCAEJ,yBAAKA,UAAU,kBACX,4BAAQA,UAAU,eAAewC,QAASzB,KAAKJ,UAA/C,8BAA8E,uBAAGX,UAAU,6BAG/F,6BACJ,yBAAKA,UAAU,aACX,2BAAIe,KAAKX,MAAME,gB,GAjEML,aCU1BwC,MATf,WACE,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBzB,WACrBA,UAAU0B,cAAcC,MAAMpC,MAAK,SAAAqC,GACjCA,EAAaC,kB","file":"static/js/main.cbb59212.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport './header.css'\n\nexport default class Header extends Component{\n    render(){\n        return(\n            <header className=\"cep-header\">\n                <div className=\"logo-settings\">\n                    <h3>PESQUISA DE ENDEREÇO</h3>\n                </div>\n            </header>\n        )\n    }\n}","import React, {Component} from 'react'\nimport './pesquisaCep.css'\nimport axios from 'axios'\n\nexport default class PesquisaCep extends Component{\n\n    constructor(props){\n        super(props)\n\n        this.state = {cep: '', endereco: '', uf: ''}\n\n        this.getCEP = this.getCEP.bind(this)\n        this.handleChange = this.handleChange.bind(this)\n        this.getLocal = this.getLocal.bind(this)\n        this.transformaLocal = this.transformaLocal.bind(this)\n    }\n\n    getCEP() {\n        axios.get(`https://viacep.com.br/ws/${this.state.cep}/json`)\n            .then(res => {\n                console.log(res.data)\n                this.setState(state => {\n                    return {\n                        endereco: `${res.data.logradouro} - Bairro ${res.data.bairro}, ${res.data.localidade} - ${res.data.uf}, ${res.data.cep}, Brasil`,\n                    }\n                })\n            })\n    }\n\n    getLocal(){\n        if(navigator.geolocation){\n            navigator.geolocation.getCurrentPosition(this.transformaLocal)\n        }\n        else{\n            alert('Este navegador não tem suporte para geolocalização!')\n        }\n    }\n\n    transformaLocal(local){\n        axios.get(`https://maps.googleapis.com/maps/api/geocode/json?latlng=${local.coords.latitude},${local.coords.longitude}&key=AIzaSyBUzTymXXri50Wo62RLkwfRBT-EYDy6x3g`)\n            .then(res => {\n                this.setState(state => {\n                    return{endereco: res.data.results[0].formatted_address}\n                })\n                \n            })\n    }\n\n    handleChange(e) {\n        this.setState({ ...this.state, cep: e.target.value })\n    }\n    render(){\n        return(\n            <div className=\"principal\">\n                <div className=\"pesquisa\">\n                    <div className=\"pesquisa-cep\">\n                        <label className=\"pesquisa-label\">Insira o CEP: </label>\n                        <input type=\"text\" className=\"cep\" onChange={this.handleChange} value={this.state.cep} />\n                        <button className=\"botao-cep\" onClick={this.getCEP}>Pesquisar</button>\n                    </div>\n                    <div className=\"texto-separador\">\n                        <h3>OU</h3>\n                    </div>\n                    <div className=\"pesquisa-local\">\n                        <button className=\"btn-pesquisa\" onClick={this.getLocal}>Capturar Localização <i className=\"fas fa-map-marker-alt\"></i></button>\n                    </div>\n                </div>\n                    <hr />\n                <div className=\"resultado\">\n                    <p>{this.state.endereco}</p>\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport './App.css';\nimport Header from './components/header'\nimport PesquisaCep from './components/pesquisaCep'\n\nfunction App() {\n  return (\n    <div>\n      <Header />\n      <PesquisaCep />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}